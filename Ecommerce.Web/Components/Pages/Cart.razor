@page "/cart/{productId:int}"
@rendermode InteractiveServer


@using Ecommerce.Model
@inject HttpClient http
@inject IJSRuntime jsRuntime;

<h3>Cart</h3>

<div class="row">
    <div class="col-6">
        <form>
            <div class="form-group mb-4">
                <label for="customerName">Customer</label>
                <input type="text" class="form-control" id="customerName" @bind="@Order.CustomerName" />
            </div>
            <div class="form-group mb-4">
                <p>Product Name</p>
                <p><b>@Product.Name &bull; <i>@Product.Stock</i></b></p>
            </div>
            <div class="form-group mb-4">
                <p>Product Price</p>
                <p><b>@Product.Price</b></p>
            </div>
            <div class="form-group mb-4">
                <label for="Quantity">Quantity</label>
                <input type="text" class="form-control" id="productPrice" @bind="@Order.Quantity" />
            </div>
            <button type="button" class="btn btn-primary" @onclick="CreateOrder">Create Order</button>
        </form>
    </div>
</div>
@code {
    [Parameter]
    public int ProductId { get; set; }
    public OrderModel Order = new();
    public ProductModel Product = new();

    protected override async Task OnInitializedAsync()
    {
        Product = await http.GetFromJsonAsync<ProductModel>($"https://localhost:7051/api/product/{ProductId}") ?? new();
        Order.ProductId = Product.Id;
        Order.ProductName = Product.Name;
        Order.ProductPrice = Product.Price;

        await base.OnInitializedAsync();
    }

    public async Task CreateOrder()
    {
        var response = await http.PostAsJsonAsync("https://localhost:7006/api/order", Order);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<OrderModel>();
            if (result != null)
            {
                Console.WriteLine($"Order created successfully with ID: {result.Id}");
                await jsRuntime.InvokeVoidAsync("alert", $"Order created successfully with ID: {result.Id}");
            }
        }
        else
        {
            Console.WriteLine("Failed to create order.");
            await jsRuntime.InvokeVoidAsync("alert", "Failed to create order.");
        }
    }
}
